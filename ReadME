# This is a proof of concept for a text-to-3D animation system I(Joel Assiakwa) conceptualized after getting inspiration from OpenAI's Sora

The purpose of this system is to transform text prompts into complete and simple 3d animations

# The way the system works

A) EXTRACTION

1) Given a text prompt eg. "A Ball bouncing": A transformer extracts the necessary objects needed for the scene to be complete.

2) The various objects that are needed in the scene are then parsed to another transformer which creates the Edges and Vertices tuples for each of these objects and saves it to a file.

3) Next, a script is created to match the prompt which describes the various actions or animations each object in the scene is going to have.

4) The script is then parsed to another transformer that creates a TimeFrame.txt file which contains information on the transformations of each object in the scene at each time interval in the form of a dict.


B) Creating the SCENE

5) Now from this information, all the various objects are added to the scene object.
6) The Timeframe.txt file is then parsed to the scene object to play the animation according to the timeframes.
7) The animation plays and shows a ball rolling.


### Current Progress

# Day 1 /14: 
A timeframe system has been created that allows the playing of animation from .txt files.
Scene object formats have been created in a format that allows chatGPT to easily create objects.

# Day 2/14:
Jaeymax worked compatibility for Crossplatform. Very Amazing
I created a format that allows all objects in a scene to load from a single file. This will allow the AI and server to easily output all the objects it wants in the scene.
Later today I should finish the basic API to prompt the AI for an object for it to create its vertices and edges and then put in the scene.


# Testing
To try out the system, go to "text_to_video_gen" and run "t2.py"

# Explanation
In the scene, we first create an object from a .txt file using the read_object_data()
Next, we add that object to the scene
Finally, we send the animation we want to play, which already contains the key of the object we want to animate, and the animation plays

# Scene.playScene()
This method contains the necessary OpenGL functions needed to create the scene.
In this, we have a loop that lasts for the number of timeframes in the animation we want to play

ARGS: AnimationFile, Frames Per Second, Loop(The number of times the animation should replay after completion)

